local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/jensonhirst/Orion/main/source"))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Create the main window
local Window = OrionLib:MakeWindow({
    Name = "Kaka hub DoD",
    HidePremium = false,
    SaveConfig = true,
    IntroEnabled = false
})

-- Abilities list
local abilities = {
    "Adrenaline",
    "Banana",
    "Block",
    "Dash",
    "Cloak",
    "Hotdog",
    "BonusPad",
    "Caretaker",
    "Taunt",
    "Punch",
    "Revolver"
}

local selected1 = "Banana"
local selected2 = "Caretaker"

-- =======================
-- Abilities Tab
-- =======================
local AbilitiesTab = Window:MakeTab({
    Name = "Abilities",
    PremiumOnly = false
})

-- Slot 1 dropdown
AbilitiesTab:AddDropdown({
    Name = "Ability Slot 1",
    Default = selected1,
    Options = abilities,
    Callback = function(Value)
        selected1 = Value
    end
})

-- Slot 2 dropdown
AbilitiesTab:AddDropdown({
    Name = "Ability Slot 2",
    Default = selected2,
    Options = abilities,
    Callback = function(Value)
        selected2 = Value
    end
})

-- Main Set Abilities button
AbilitiesTab:AddButton({
    Name = "Set Abilities",
    Callback = function()
        local args = { { selected1, selected2 } }
        local rep = game:GetService("ReplicatedStorage")
        local events = rep:FindFirstChild("Events")
        if not events then
            warn("Events folder not found")
            return
        end
        local remotes = events:FindFirstChild("RemoteEvents")
        if not remotes then
            warn("RemoteEvents not found")
            return
        end
        local abilityRemote = remotes:FindFirstChild("AbilitySelection")
        if not abilityRemote or not abilityRemote:IsA("RemoteEvent") then
            warn("AbilitySelection RemoteEvent not found or invalid")
            return
        end

        pcall(function()
            abilityRemote:FireServer(unpack(args))
        end)
    end
})

-- =======================
-- Premake Tab
-- =======================
local PremakeTab = Window:MakeTab({
    Name = "Premake",
    PremiumOnly = false
})

local function sendAbilities(slot1, slot2)
    local args = { { slot1, slot2 } }
    local rep = game:GetService("ReplicatedStorage")
    local events = rep:FindFirstChild("Events")
    if not events then
        warn("Events folder not found")
        return
    end
    local remotes = events:FindFirstChild("RemoteEvents")
    if not remotes then
        warn("RemoteEvents not found")
        return
    end
    local abilityRemote = remotes:FindFirstChild("AbilitySelection")
    if not abilityRemote or not abilityRemote:IsA("RemoteEvent") then
        warn("AbilitySelection RemoteEvent not found or invalid")
        return
    end

    pcall(function()
        abilityRemote:FireServer(unpack(args))
    end)
end

-- Loveshot button
PremakeTab:AddButton({
    Name = "Loveshot",
    Callback = function()
        selected1 = "Revolver"
        selected2 = "Caretaker"
        sendAbilities(selected1, selected2)
    end
})

-- Carepad button
PremakeTab:AddButton({
    Name = "Carepad",
    Callback = function()
        selected1 = "Caretaker"
        selected2 = "BonusPad"
        sendAbilities(selected1, selected2)
    end
})

PremakeTab:AddLabel("Forsaken Deck")

PremakeTab:AddButton({
    Name = "Guest 1337",
    Callback = function()
        local args = { "Block", "Punch" }
        local rep = game:GetService("ReplicatedStorage")
        local events = rep:WaitForChild("Events")
        local remotes = events:WaitForChild("RemoteEvents")
        local abilityRemote = remotes:WaitForChild("AbilitySelection")
        pcall(function()
            abilityRemote:FireServer(unpack({args}))
        end)
    end
})

PremakeTab:AddButton({
    Name = "Noob",
    Callback = function()
        local args = { "Cloak", "Adrenaline" }
        local rep = game:GetService("ReplicatedStorage")
        local events = rep:WaitForChild("Events")
        local remotes = events:WaitForChild("RemoteEvents")
        local abilityRemote = remotes:WaitForChild("AbilitySelection")
        pcall(function()
            abilityRemote:FireServer(unpack({args}))
        end)
    end
})

-- Shedletsky button
PremakeTab:AddButton({
    Name = "Shedletsky",
    Callback = function()
        local args = { "Punch", "Hotdog" }
        local rep = game:GetService("ReplicatedStorage")
        local events = rep:WaitForChild("Events")
        local remotes = events:WaitForChild("RemoteEvents")
        local abilityRemote = remotes:WaitForChild("AbilitySelection")
        pcall(function()
            abilityRemote:FireServer(unpack({args}))
        end)
    end
})

-- Two Time Temu button
PremakeTab:AddButton({
    Name = "Two Time Temu",
    Callback = function()
        local args = { "Punch", "Dash" }
        local rep = game:GetService("ReplicatedStorage")
        local events = rep:WaitForChild("Events")
        local remotes = events:WaitForChild("RemoteEvents")
        local abilityRemote = remotes:WaitForChild("AbilitySelection")
        pcall(function()
            abilityRemote:FireServer(unpack({args}))
        end)
    end
})

local AimbotTab = Window:MakeTab({
    Name = "Aimbot",
    PremiumOnly = false
})

-- Revolver Aimbot (new, independent)
local revolverAimbotActive = false
local revolverPredictionValue = 2
local revolverPredictionMode = "Straight"

AimbotTab:AddToggle({
    Name = "Revolver Aimbot",
    Default = false,
    Callback = function(state)
        revolverAimbotActive = state
        if state then
            spawn(function()
                local lp = LocalPlayer
                while revolverAimbotActive do
                    if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
                        local humanoid = lp.Character:FindFirstChildOfClass("Humanoid")
                        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                            if track.Animation and track.Animation.AnimationId == "rbxassetid://74108653904830" then
                                local hrp = lp.Character:FindFirstChild("HumanoidRootPart")
                                if hrp then
                                    local target = nil
                                    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
                                        if plr ~= lp and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") then
                                            local th = plr.Character:FindFirstChildOfClass("Humanoid")
                                            local tph = plr.Character:FindFirstChild("HumanoidRootPart")
                                            if th and tph and th.Health > 130 then
                                                target = tph
                                                break
                                            end
                                        end
                                    end

                                    if target then
                                        local predictedPos = target.Position
                                        local vel = target.Velocity
                                        if vel.Magnitude > 0.01 then
                                            if revolverPredictionMode == "Straight" then
                                                predictedPos = predictedPos + (vel.Unit * revolverPredictionValue)
                                            elseif revolverPredictionMode == "Sideway" then
                                                local perp = Vector3.new(-vel.Z, 0, vel.X)
                                                if perp.Magnitude > 0.01 then
                                                    predictedPos = predictedPos + (perp.Unit * revolverPredictionValue)
                                                end
                                            end
                                        end
                                        hrp.CFrame = CFrame.lookAt(hrp.Position, predictedPos)
                                    end
                                end
                            end
                        end
                    end
                    game:GetService("RunService").Heartbeat:Wait()
                end
            end)
        end
    end
})

AimbotTab:AddTextbox({
    Name = "Revolver Prediction Value",
    Default = "2",
    TextDisappear = false,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            revolverPredictionValue = num
        end
    end
})

AimbotTab:AddDropdown({
    Name = "Revolver Prediction Mode",
    Default = "Straight",
    Options = {"Straight", "Sideway"},
    Callback = function(option)
        revolverPredictionMode = option
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

local function createAimbot(animationId, name)
    local active = false
    local predictionValue = 3
    local predictionMode = "Straight"

    AimbotTab:AddToggle({
        Name = name.." Toggle",
        Default = false,
        Callback = function(state)
            active = state
        end
    })

    AimbotTab:AddTextbox({
        Name = name.." Prediction Value",
        Default = "3",
        TextDisappear = false,
        Callback = function(value)
            local num = tonumber(value)
            if num then predictionValue = num end
        end
    })

    AimbotTab:AddDropdown({
        Name = name.." Prediction Mode",
        Default = "Straight",
        Options = {"Normal","Straight","Sideway"},
        Callback = function(option)
            predictionMode = option
        end
    })

    RunService.Heartbeat:Connect(function()
        if not active then return end
        pcall(function()
            local char = LocalPlayer.Character
            if not char then return end
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end
            for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation and track.Animation.AnimationId == "rbxassetid://"..animationId then
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if not hrp then return end
                    local target = nil
                    for _, plr in pairs(Players:GetPlayers()) do
                        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") then
                            local hum = plr.Character:FindFirstChildOfClass("Humanoid")
                            local tph = plr.Character:FindFirstChild("HumanoidRootPart")
                            if hum and tph and hum.Health > 130 then
                                target = tph
                                break
                            end
                        end
                    end
                    if target then
                        local predictedPos = target.Position
                        if predictionMode ~= "Normal" then
                            local vel = target.Velocity or Vector3.new(0,0,0)
                            predictedPos = predictedPos + vel.Unit * predictionValue
                        end
                        local dx = predictedPos.X - hrp.Position.X
                        local dz = predictedPos.Z - hrp.Position.Z
                        hrp.CFrame = CFrame.new(hrp.Position) * CFrame.Angles(0, math.atan2(dx, dz),0)
                    end
                end
            end
        end)
    end)
end

createAimbot("113732291990231","Taunt Aimbot")
createAimbot("124781750889573","Punch Aimbot")

local activeCare = false
local careMode = "All"

AimbotTab:AddToggle({
    Name = "CareTaker Aimbot",
    Default = false,
    Callback = function(state) activeCare = state end
})

AimbotTab:AddDropdown({
    Name = "CareTaker Mode",
    Default = "All",
    Options = {"All","Nearest","Lowest Health","Normal"},
    Callback = function(option) careMode = option end
})

RunService.Heartbeat:Connect(function()
    if not activeCare then return end
    pcall(function()
        local char = LocalPlayer.Character
        if not char then return end
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            if track.Animation and track.Animation.AnimationId == "rbxassetid://128767098320893" then
                local hrp = char:FindFirstChild("HumanoidRootPart")
                if not hrp then return end
                local target = nil
                local closestDist = math.huge
                local lowestHealth = math.huge
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") then
                        local hum = plr.Character:FindFirstChildOfClass("Humanoid")
                        local tph = plr.Character:FindFirstChild("HumanoidRootPart")
                        if hum and tph and hum.Health > 0 then
                            local dist = (hrp.Position - tph.Position).Magnitude
                            if careMode == "Nearest" then
                                if dist < closestDist then
                                    closestDist = dist
                                    target = tph
                                end
                            elseif careMode == "Lowest Health" then
                                if hum.Health < lowestHealth then
                                    lowestHealth = hum.Health
                                    target = tph
                                end
                            elseif careMode == "All" then
                                if dist < closestDist and hum.Health < lowestHealth then
                                    closestDist = dist
                                    lowestHealth = hum.Health
                                    target = tph
                                end
                            elseif careMode == "Normal" then
                                target = tph
                            end
                        end
                    end
                end
                if target then
                    local dx = target.Position.X - hrp.Position.X
                    local dz = target.Position.Z - hrp.Position.Z
                    hrp.CFrame = CFrame.new(hrp.Position) * CFrame.Angles(0, math.atan2(dx,dz),0)
                end
            end
        end
    end)
end)

-- =======================
-- Blatant Tab
-- =======================
local BlatantTab = Window:MakeTab({
    Name = "Blatant",
    PremiumOnly = false
})

local selectedAbility = abilities[1] -- default

-- Dropdown for Blatant tab
BlatantTab:AddDropdown({
    Name = "Select Ability",
    Default = selectedAbility,
    Options = abilities,
    Callback = function(value)
        selectedAbility = value
    end
})

-- Button to Use Ability
BlatantTab:AddButton({
    Name = "Use Ability",
    Callback = function()
        -- Fire the ability
        local args = { selectedAbility }
        local rep = game:GetService("ReplicatedStorage")
        local events = rep:WaitForChild("Events")
        local remotes = events:WaitForChild("RemoteFunctions")
        local useAbility = remotes:WaitForChild("UseAbility")
        pcall(function()
            useAbility:InvokeServer(unpack(args))
        end)
    end
})

local blatantToggleActive = false

BlatantTab:AddToggle({
    Name = "Stun Helper (Punch)",
    Default = false,
    Callback = function(state)
        blatantToggleActive = state
        if state then
            spawn(function()
                local lp = LocalPlayer
                while blatantToggleActive do
                    if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
                        local humanoid = lp.Character:FindFirstChildOfClass("Humanoid")
                        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                            if track.Animation.AnimationId == "rbxassetid://124781750889573" then
                                local hrp = lp.Character:FindFirstChild("HumanoidRootPart")
                                if hrp then
                                    -- Find one valid target only
                                    local target = nil
                                    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
                                        if plr ~= lp and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") then
                                            local targetHumanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                                            if targetHumanoid.Health > 233 and plr.Character:FindFirstChild("HumanoidRootPart") then
                                                target = plr.Character.HumanoidRootPart
                                                break
                                            end
                                        end
                                    end

                                    if target then
                                        local originalCFrame = hrp.CFrame
                                        -- teleport behind + face target
                                        local behindCFrame = target.CFrame * CFrame.new(0, 0, -2)
                                        hrp.CFrame = CFrame.lookAt(behindCFrame.Position, target.Position)

                                        -- keep facing target for 0.7 sec
                                        local start = tick()
                                        while tick() - start < 0.7 and blatantToggleActive and hrp and target do
                                            hrp.CFrame = CFrame.lookAt(hrp.Position, target.Position)
                                            game:GetService("RunService").Heartbeat:Wait()
                                        end

                                        -- teleport back safely
                                        if hrp then
                                            hrp.CFrame = originalCFrame
                                        end
                                    end
                                end
                            end
                        end
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

-- Table of ability cooldowns/descriptions
local abilityInfo = {
    Adrenaline = "Cooldown: 30 seconds",
